<Project>

  <UsingTask TaskName="_XmlUpdate"
                       TaskFactory="CodeTaskFactory"
                       AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >
    <ParameterGroup>
      <XmlFileName Required="True" />
      <XPath Required="True" />
      <Value Required="True" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System"/>
      <Using Namespace="System.Xml.XPath"/>
      <!-- The following code is from the MSBuildTasks library (https://github.com/loresoft/msbuildtasks/blob/6196d43e7eb6807f306e9861b286fe61c8bb0993/Source/MSBuild.Community.Tasks/XmlUpdate.cs) -->
      <!-- MSBuildTasks is not used as it brings a Zip tasks that conflicts with Xamarin's -->
      <Code Type="Fragment" Language="cs">
        <![CDATA[
						System.Xml.Linq.XDocument xdoc = System.Xml.Linq.XDocument.Load(XmlFileName);
						System.Xml.XmlNamespaceManager manager = new System.Xml.XmlNamespaceManager(new System.Xml.NameTable());

						var items = xdoc.XPathEvaluate(XPath, manager) as System.Collections.Generic.IEnumerable<object>;

						Console.WriteLine("Updating " + items.Count() + " nodes");

						foreach (var item in items.ToArray())
						{
								var attr = item as System.Xml.Linq.XAttribute;
								if (attr != null)
								{
									attr.SetValue(Value);
								}

								var ele = item as System.Xml.Linq.XElement;
								if (ele != null)
								{
									ele.SetValue(Value);
								}
						}

						xdoc.Save(XmlFileName);
				]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="_SetPackageVersion"
          BeforeTargets="PrepareForBuild"
          Condition="'$(PackageVersion)'!='' And '$(PackageBuildNumber)'!=''">
    <PropertyGroup>
      <_ManifestPath>.\Properties\AndroidManifest.xml</_ManifestPath>
      <_PlistFilePath>.\Info.plist</_PlistFilePath>
      <_AppxManifestPath>.\Package.appxmanifest</_AppxManifestPath>
      <_AndroidNamespace>
        <Namespace Prefix="android" Uri="http://schemas.android.com/apk/res/android" />
      </_AndroidNamespace>
      <_WindowsNamespace>
        <Namespace Prefix="x" Uri="http://schemas.microsoft.com/appx/manifest/foundation/windows10" />
      </_WindowsNamespace>
    </PropertyGroup>

    <!-- Android -->
    <XmlPoke Condition="Exists('$(_ManifestPath)')"
                     XmlInputPath="$(_ManifestPath)"
                     Query="/manifest/@android:versionName"
                     Value="$(PackageVersion)"
                     Namespaces="$(_AndroidNamespace)" />

    <XmlPoke Condition="Exists('$(_ManifestPath)')"
                     XmlInputPath="$(_ManifestPath)"
                     Query="/manifest/@android:versionCode"
                     Value="$(PackageBuildNumber)"
                     Namespaces="$(_AndroidNamespace)" />

    <!-- iOS -->
    <!-- Using our own _XmlUpdate instead of XmlPoke to avoid unecessary (and possibly breaking) changes in the plist -->
    <_XmlUpdate Condition="Exists('$(_PlistFilePath)')"
                            XmlFileName="$(_PlistFilePath)"
                            XPath="//plist/dict/key[text() = 'CFBundleShortVersionString']/following-sibling::string[1]"
                            Value="$(PackageVersion)" />

    <_XmlUpdate Condition="Exists('$(_PlistFilePath)')"
                            XmlFileName="$(_PlistFilePath)"
                            XPath="//plist/dict/key[text() = 'CFBundleVersion']/following-sibling::string[1]"
                            Value="$(PackageBuildNumber)" />

    <!-- UWP -->
    <ItemGroup>
      <_Major Include="$(PackageVersion.Split('.')[0])" />
      <_Minor Include="$(PackageVersion.Split('.')[1])" />
      <_Revision Include="$(PackageVersion.Split('.')[3])" />
    </ItemGroup>

    <!-- Forcing the inclusion of the build number in UWP as the standard format is Major.Minor.Build.Revision -->
    <!-- Not doing this makes it impossible to update a package unless the version is updated -->
    <PropertyGroup>
      <_UWPVersion>@(_Major).@(_Minor).$(PackageBuildNumber).@(_Revision)</_UWPVersion>
    </PropertyGroup>

    <XmlPoke Condition="Exists('$(_AppxManifestPath)')"
                     XmlInputPath="$(_AppxManifestPath)"
                     Query="/x:Package/x:Identity/@Version"
                     Value="$(_UWPVersion)"
                     Namespaces="$(_WindowsNamespace)" />
  </Target>
</Project>
